(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{59:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"变量和类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量和类型"}},[t._v("#")]),t._v(" 变量和类型")]),t._v(" "),a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("h3",{attrs:{id:"什么是变量？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是变量？"}},[t._v("#")]),t._v(" 什么是变量？")]),t._v(" "),a("p",[t._v("变量来源于数学，在计算机语言中是指能储存计算结果或能表示值的抽象概念。我们在程序中常常需要保存和处理数据，当程序中需要使用数据时，可以定义某种类型的变量，通过变量名来访问存储这段数据的内存。所以，从本质上看，变量代表了一段可操作的内存，也可以认为变量是内存的符号化表示。")]),t._v(" "),a("h3",{attrs:{id:"javascript-中有几种数据类型？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中有几种数据类型？"}},[t._v("#")]),t._v(" JavaScript 中有几种数据类型？")]),t._v(" "),a("ol",[a("li",[t._v("7种基本数据类型\n"),a("ul",[a("li",[t._v("Undefined ———— 未定义类型")]),t._v(" "),a("li",[t._v("Null ———— 空类型")]),t._v(" "),a("li",[t._v("Boolean ———— 布尔类型")]),t._v(" "),a("li",[t._v("Number ———— 数字类型")]),t._v(" "),a("li",[t._v("String ———— 字符串类型")]),t._v(" "),a("li",[t._v("Symbol ———— 表示独一无二的值")]),t._v(" "),a("li",[t._v("BigInt ———— 任意精度整数类型")])])]),t._v(" "),a("li",[t._v("1种引用数据类型\n"),a("ul",[a("li",[t._v("Object ———— 对象类型\n"),a("ul",[a("li",[t._v("Function")]),t._v(" "),a("li",[t._v("Array")]),t._v(" "),a("li",[t._v("Class")]),t._v(" "),a("li",[t._v("Date")]),t._v(" "),a("li",[t._v("RegExp")]),t._v(" "),a("li",[t._v("Math")]),t._v(" "),a("li",[t._v("JSON")]),t._v(" "),a("li",[t._v("Error")])])])])])]),t._v(" "),a("h3",{attrs:{id:"变量在内存中的具体存储形式？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量在内存中的具体存储形式？"}},[t._v("#")]),t._v(" 变量在内存中的具体存储形式？")]),t._v(" "),a("ul",[a("li",[t._v("基本类型保存在栈内存中，值有固定大小，通过按值访问。")]),t._v(" "),a("li",[t._v("引用类型保存在堆内存中，值的大小不固定。栈内存中存放该对象的访问地址指针，指向堆内存中的对象。JavaScript 中不允许直接访问堆内存中的位置。因此操作对象时，实际操作的是对象的引用。")])]),t._v(" "),a("h2",{attrs:{id:"基本数据类型常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型常见问题"}},[t._v("#")]),t._v(" 基本数据类型常见问题")]),t._v(" "),a("h3",{attrs:{id:"如何理解-undefinde-和-null-？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-undefinde-和-null-？"}},[t._v("#")]),t._v(" 如何理解 undefinde 和 null ？")]),t._v(" "),a("ul",[a("li",[t._v("undefined 表示一个变量未初始化。若一个变量声明时未进行初始化（赋值），则为 undefined。")]),t._v(" "),a("li",[t._v("null 表示一个对象不存在，若一个变量或一段函数返回的结果期望为一个对象，则在该对象尚未存在时访问它就会返回为 null。")]),t._v(" "),a("li",[t._v("即：undefined 表示空变量，null 表示空对象。")])]),t._v(" "),a("h3",{attrs:{id:"symbol-在实际开发中的作用？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-在实际开发中的作用？"}},[t._v("#")]),t._v(" Symbol 在实际开发中的作用？")]),t._v(" "),a("p",[t._v("首先需要理解 Symbol 是一种无法被重建的基本类型。看一个例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" s4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("我们可以看到 Symbol 虽然是一种基本数据类型，但是该类型的变量除了与自身相等外，和其余变量皆互不相等，有点类似于对象创建的实例互不相等的情况。所以这种独特的特性就给 Symbol 带来了独特的应用场景。")]),t._v(" "),a("ul",[a("li",[t._v("用来代替常量\n在实际业务中，我们常常定义一组常量来代表一种业务逻辑下的几种不同类型，而这几个常量之间需要保证唯一性，为了保证这一点，我们需要为每个常量赋一个唯一的值，而现在可以直接使用 Symbol 来为这些常量赋值。")]),t._v(" "),a("li",[t._v("作为对象的属性\n"),a("ul",[a("li",[t._v("阻止对象属性名冲突\n在不知道对象原有属性名的情况下，可用来扩展对象的属性。\n例如当两个不同的库要读取对象的一些原始属性时，可以在初始化时生成其所需的 symbols ，然后在对象上任意赋值。")]),t._v(" "),a("li",[t._v("模拟私有属性\n使用 Symbol 作为属性名的对象，在序列化器中该属性会被隐藏。在形如 "),a("code",[t._v("Object.keys()")]),t._v(" 或 "),a("code",[t._v("for...in")]),t._v(" 的操作中，并不会获取到 symbols ，"),a("code",[t._v("JSON.stringify()")]),t._v(" 的输出也不会包含 symbols 。但是可以通过 "),a("code",[t._v("Reflect.ownKeys()")]),t._v(" 来获取。\n但一般情况下如果对 Symbol 属性没有直接的引用，则无法访问到该属性的值。所以可以用来定义类的私有属性/方法。")])])]),t._v(" "),a("li",[t._v("注册和获取全局 Symbol\n使用 "),a("code",[t._v("Symbol.for()")]),t._v(" 可以注册或获取一个 windows 间全局的 Symbol 实例。")])]),t._v(" "),a("h2",{attrs:{id:"引用数据类型常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型常见问题"}},[t._v("#")]),t._v(" 引用数据类型常见问题")]),t._v(" "),a("h3",{attrs:{id:"对象的深拷贝和浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的深拷贝和浅拷贝"}},[t._v("#")]),t._v(" 对象的深拷贝和浅拷贝")]),t._v(" "),a("p",[t._v("首先要弄明白 JavaScript 是如何复制引用类型的。看如下例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eg1")]),t._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a: 2 }")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a: 2 }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eg2")]),t._v("\nobj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a: 3 }")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a: 3 }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eg3")]),t._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {a: 3, b: "b"}')]),t._v("\n")])])]),a("p",[t._v("eg1 中只修改了 obj2 中的 a 属性，obj1 中的 a 属性却同时改变了。eg2 中修改了 obj1 中的 a 属性，obj2 中的 a 属性也同时改变了。eg3 中给 obj2 新增了一个 b 属性，obj1 中也增加了 b 属性。看起来，obj1 和 obj2 所指向的是同一个对象。")]),t._v(" "),a("p",[t._v("这就要从对象的底层存储来分析了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/images/base-1-1-1.png",alt:"保存在栈中的变量和堆内存中对象的关系"}})]),t._v(" "),a("h4",{attrs:{id:"浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[t._v("#")]),t._v(" 浅拷贝")]),t._v(" "),a("p",[t._v("对浅拷贝的定义可以理解为：")]),t._v(" "),a("blockquote",[a("p",[t._v("当创建一个对象的时候，该对象有着对原始对象属性值的一份精确拷贝，拷贝的值始终是栈内存中的值。由于基本类型在栈内存中存放的就是属性值，则拷贝时拷贝的就是基本数据类型的值。由于引用类型栈内存中存放的是指向堆内存中的对象的值的指针，所以拷贝的就是其内存地址，因此其中一个对象的值修改的时候，就会影响到另一个对象。")])]),t._v(" "),a("h4",{attrs:{id:"深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[t._v("#")]),t._v(" 深拷贝")]),t._v(" "),a("p",[t._v("由于在实际应用中，我们在操作对象时，往往不希望拷贝出来的对象对原始对象造成污染。因此对于引用类型，我们希望在对内存中开辟一块新的内存地址用于存放复制的对象，并将原始对象的值复制过来。所以对于"),a("strong",[t._v("对象")]),t._v("，我们需要深拷贝，即：")]),t._v(" "),a("blockquote",[a("p",[t._v("将一个对象从内存中完整的拷贝一份出来，从堆内存中开辟一个新的区域存放新对象，且修改新对象不会影响原对象。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);