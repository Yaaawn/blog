(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{62:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"构造函数、原型和原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数、原型和原型链"}},[t._v("#")]),t._v(" 构造函数、原型和原型链")]),t._v(" "),s("p",[t._v("每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的指针。")]),t._v(" "),s("h2",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[t._v("构造函数本身就是一个函数，与普通函数没有任何区别，不过为了规范一般将其首字母大写。构造函数和普通函数的区别在于，使用 new 生成实例的函数就是构造函数，直接调用的就是普通函数。")]),t._v(" "),s("p",[s("code",[t._v("constructor")]),t._v(" 返回创建实例对象时构造函数的引用。此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。")]),t._v(" "),s("p",[t._v("基本类型的"),s("code",[t._v("constructor")]),t._v("属性值是只读的，引用类型是可以修改的。")]),t._v(" "),s("h2",{attrs:{id:"原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),s("p",[t._v("JavaScript 是一种"),s("strong",[t._v("基于原型的语言")]),t._v("（prototype-based language），每个对象都拥有一个"),s("strong",[t._v("原型对象")]),t._v("，对象以其原型为模板，从原型中继承方法和属性，这些属性和方法定义在对象的构造器函数的"),s("code",[t._v("prototype")]),t._v("属性上，而非对象实例本身。")]),t._v(" "),s("p",[t._v("看一个例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protptype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_proto_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_proto_ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n")])])]),s("p",[t._v("构造函数"),s("code",[t._v("Parent")]),t._v("上有一个指向原型的指针"),s("code",[t._v("Parent.prototype")]),t._v("，原型上有一个指向构造函数的指针"),s("code",[t._v("Parent.prototype.constructor")]),t._v("。")]),t._v(" "),s("p",[t._v("实例"),s("code",[t._v("child")]),t._v("上有一个"),s("code",[t._v("child._proto_")]),t._v("属性，指向对象的原型。")]),t._v(" "),s("h2",{attrs:{id:"原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),s("p",[t._v("每个对象都有一个原型对象，通过"),s("code",[t._v("_proto_")]),t._v("指针指向上一个原型，并从中"),s("strong",[t._v("继承方法和属性")]),t._v("，同时原型对象也可能拥有原型，这样一层一层，最终指向"),s("code",[t._v("null")]),t._v("。这种关系被称为"),s("strong",[t._v("原型链（ptototype chain）")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ul",[s("li",[t._v("所有的引用类型，都具有对象的特性，即可自由扩展属性")]),t._v(" "),s("li",[t._v("所有的引用类型，都有一个"),s("code",[t._v("_proto")]),t._v("属性（隐式属性）")]),t._v(" "),s("li",[t._v("所有的函数，都具有一个"),s("code",[t._v("prototype")]),t._v("（显式原型），属性值也是一个普通对象。")]),t._v(" "),s("li",[t._v("所有的引用类型，其隐式原型指向其构造函数的显式原型。")]),t._v(" "),s("li",[t._v("当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会失去它的"),s("code",[t._v("_proto_")]),t._v("中去寻找。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);